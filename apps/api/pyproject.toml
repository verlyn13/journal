[project]
name = "journal-api"
version = "0.1.0"
description = "Modern FastAPI backend with pgvector, FTS, and event sourcing"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Verlyn13" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
requires-python = ">=3.13"
dependencies = [
    "fastapi[standard]>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "sqlmodel>=0.0.24",
    "sqlalchemy[asyncio]==2.0.43",
    "asyncpg>=0.29.0",
    "alembic>=1.13.2",
    "pydantic>=2.8.0",
    "pydantic-settings>=2.4.0",
    "pyjwt[crypto]>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "redis>=5.0.8",
    "nats-py>=2.7.0",
    "pgvector>=0.2.5",
    "strawberry-graphql[fastapi]>=0.235.0",
    "opentelemetry-api>=1.26.0",
    "opentelemetry-sdk>=1.26.0",
    "opentelemetry-instrumentation-fastapi>=0.47b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.47b0",
    "openai>=1.40.0", # For embeddings (optional)
    "numpy>=1.24.0", # For vector operations
    "psycopg2-binary>=2.9.10",
    "opentelemetry-exporter-otlp-proto-grpc>=1.36.0",
    "markdown-it-py>=4.0.0",
    "bleach>=6.2.0",
    "argon2-cffi>=23.1.0",
    "psycopg[binary]>=3.2.10",
    "webauthn>=2.7.0",
    "cryptography>=45.0.0",
    "python-jose[cryptography]>=3.5.0",
    "pyotp>=2.9.0",
    "httpx>=0.28.1",
    "types-python-jose>=3.5.0.20250531",
    "psutil>=6.1.1",
]

[tool.uv]
dev-dependencies = [
    # Testing
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.27.0",
    "factory-boy>=3.3.0",
    "faker>=25.0.0",
    # Code quality
    "ruff>=0.13.0",
    "mypy==1.17.1",
    "pre-commit>=3.8.0",
    # Security
    "bandit>=1.7.5",
    "safety>=3.2.0",
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    "pyyaml>=6.0.2",
    "jsonschema>=4.23.0",
    # Development tools
    "ipython>=8.26.0",
    "rich>=13.7.0",
    "typer>=0.12.0",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.8.0",
    "libcst>=1.8.2",
    "types-bleach>=6.2.0.20250809",
    "freezegun>=1.5.5",
    "pytest-freezegun>=0.4.2",
    "aiohttp>=3.12.15",
    "types-psutil>=7.0.0.20250822",
]

[project.scripts]
journal-api = "app.main:main"
journal-worker = "app.workers.embedding_consumer:main"

[project.urls]
Homepage = "https://github.com/verlyn13/journal"
Repository = "https://github.com/verlyn13/journal"
Documentation = "https://github.com/verlyn13/journal/tree/main/docs"
Issues = "https://github.com/verlyn13/journal/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Hatchling build configuration
[tool.hatch.build.targets.wheel]
packages = ["app"]

# Ruff configuration (v0.13.0+ with modern best practices)
[tool.ruff]
required-version = "==0.13.0"  # Lock version for consistency
preview = true
line-length = 100
fix = true
unsafe-fixes = false  # Start conservative, promote with extend-safe-fixes
show-fixes = true
output-format = "github"  # Better CI annotations
cache-dir = ".ruff_cache"
respect-gitignore = true
force-exclude = true  # Make pre-commit honor excludes
src = ["app", "tests"]  # Improve import analysis
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    "*.egg-info",
    "alembic/versions",
    "alembic/versions_legacy",
]

[tool.ruff.lint]
# Enable preview rules explicitly (not by prefix)
explicit-preview-rules = true

# Progressive autofix strategy: start with safe fixes only
fixable = ["E", "F", "I"]  # Expand after discovery mode review
unfixable = []  # Control via fixable list for now

# Safe fixes promoted from unsafe after validation
extend-safe-fixes = []  # e.g., ["UP032"] after testing

# Keep type-checking moves gated initially
extend-unsafe-fixes = ["TCH"]

# Phased approach: enable critical rules first
select = [
    # Core rules (always enabled)
    "F",     # pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "I",     # isort
    "UP",    # pyupgrade
    "SIM",   # simplicity
    "C4",    # flake8-comprehensions
    
    # Security
    "S",     # bandit subset (S1xx-S5xx)
    
    # Error handling
    "TRY",   # tryceratops (logging.exception, error handling)
    "BLE",   # blind-except
    "EM",    # error message formatting
    
    # Style & best practices
    "PLC0415", # no local imports
    "RUF029",  # async must await
    "PLR6301", # no-self-use
    "PLR6201", # literal-membership
    
    # Tests
    "PT",    # pytest rules
    
    # Docs (minimal for public APIs)
    "D417",  # argument docs for public methods
    
    # Additional high-value rules
    "ASYNC", # async correctness
    "PERF",  # performance suggestions
    "DTZ",   # datetime timezone awareness
    "RET",   # return statement issues
    "PIE",   # flake8-pie misc lints
    "PGH",   # pygrep-hooks
    "LOG",   # logging format
    "FURB",  # refurb modernization
    "A",     # builtins shadowing
    "B",     # bugbear
    "PL",    # pylint (selected subset)
    "PTH",   # use pathlib
]
ignore = [
    # Line length (handled by formatter)
    "E501",
    
    # Complexity limits (will address later)
    "PLR0913", # too-many-arguments
    "PLR0912", # too-many-branches  
    "PLR0915", # too-many-statements
    "PLR2004", # magic-value-comparison (allow in domain logic)
    "C901",    # too-complex
    "PLR0911", # too-many-return-statements
    "PLR0914", # too-many-locals
    "PLR0904", # too-many-public-methods
    
    # FastAPI specific patterns
    "B904",    # raise-without-from (FastAPI exception handling)
    
    # Documentation (handle separately)
    "D100",    # missing-module-docstring
    "D101",    # missing-class-docstring
    "D102",    # missing-method-docstring
    "D103",    # missing-function-docstring
    "D104",    # missing-package-docstring
    "D105",    # missing-magic-method-docstring
    "D106",    # missing-nested-class-docstring
    "D107",    # missing-init-docstring
    # Keep D417 enabled for argument docs
    
    # SQLModel/Pydantic specific
    "RUF012",  # mutable-class-default (Pydantic handles this)
    
    # Stylistic preferences
    "TRY003",  # raise-vanilla-args
    "TRY004",  # prefer-type-error
    "TRY300",  # try-consider-else
    "TRY301",  # raise-within-try
    "EM101",   # raw-string-in-exception
    "EM102",   # f-string-in-exception
    "SLF001",  # private-member-access (needed for tests)
    "COM812",  # trailing-comma-missing (conflicts with formatter)
    "ISC001",  # single-line-implicit-string-concatenation
    
    # Allow assert in production code for now
    "S101",    # assert-used
    
    # False positives on security rules to configure
    # Will refine these after initial pass
]

# Progressive autofix: expand fixable list as we gain confidence
# Currently conservative, will expand after discovery mode analysis

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["app", "tests"]
lines-after-imports = 2

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 15
max-returns = 6
max-statements = 50

[tool.ruff.lint.pycodestyle]
max-doc-length = 100
ignore-overlong-task-comments = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.Query",
    "fastapi.Path",
    "fastapi.Body",
    "fastapi.Header",
    "fastapi.File",
    "fastapi.Form",
    "fastapi.Cookie",
    "sqlalchemy.Column",
    "sqlmodel.Field",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true
parametrize-names-type = "csv"
parametrize-values-type = "list"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"
avoid-escape = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # assert-used
    "PLR2004", # magic-value-comparison
    "SLF001", # private-member-access
    "D",      # docstrings not needed in tests
    "PLR6301", # method-could-be-function (pytest test classes)
    "DTZ003", # allow naive datetime in tests
    "DTZ001", # datetime without tzinfo allowed in tests
    "BLE001", # allow broad except in tests (temporarily)
    "PLC0415", # allow imports inside tests when needed
    "RUF029", # async-without-await in test helpers
    "PERF401", # list comprehensions and extend in tests
    "S105",   # hardcoded-password-strings in test data
    "S106",   # hardcoded passwords in test fixtures
    "S608",   # SQL string construction in tests
    "PLR6201", # set literal suggestion noise in tests
    "TRY002",  # require custom exception types
    "PLR0914", # too many locals in big integration tests
    "F811",   # redefinition of unused (pytest fixtures)
    "PT001",  # fixture parentheses style noise in tests
    "PT018",  # composite assertions allowed in tests
    "A004",   # allow shadowing builtin names in tests (e.g., ConnectionError)
    "S107",   # hardcoded password defaults in test helpers
]
"app/api/internal/*.py" = [
    "BLE001",  # broad except in integration endpoints
    "TRY400",  # prefer logging.exception (to be refactored later)
]
"app/api/v1/*.py" = [
    "BLE001",
]
"app/infra/security/**/*.py" = [
    "BLE001",
    "TRY400",
]
"app/domain/auth/**/*.py" = [
    "BLE001",
    "TRY400",
]
"tests/unit/test_jwt_service.py" = [
    "F401",   # unused-import (fixtures are used by pytest)
    "F811",   # redefinition (pytest fixture pattern)
]
"tests/unit/test_token_validator.py" = [
    "F401",   # unused-import (fixtures are used by pytest)
    "F811",   # redefinition (pytest fixture pattern)
]
"app/middleware/jwt_middleware.py" = [
    "F401",   # json import used in exception handling
]
"app/domain/auth/key_manager.py" = [
    "F401",   # asyncio import used for TimeoutError
]
"app/domain/auth/rate_limiter.py" = [
    "F401",   # asyncio import used for TimeoutError
]
"alembic/**/*.py" = [
    "D",      # docstrings not needed in migrations
    "E402",   # module-import-not-at-top
]
"app/infra/secrets/**/*.py" = [
    # Integration-heavy code with external services
    "BLE001",  # broad except for external service errors
    "TRY400",  # logging.error with exc_info for debugging
    "S105",    # false positives on "token_type" etc
    "S106",    # false positives on auth parameters
]
"app/infra/security/webhook_verification.py" = [
    # Complex security validation logic
    "PLR0913", # many arguments for verification
    "C901",    # complex verification logic
]
"app/telemetry/infisical_monitoring.py" = [
    "BLE001",
    "PLC0415",
]
"app/scripts/migrate_to_infisical.py" = [
    "BLE001",
    "PLC0415",
]
"app/infra/secrets/infisical_client.py" = [
    "S404",   # subprocess usage is vetted and locked to absolute path
]
"tests/integration/test_infisical_integration.py" = [
    "S404",   # uses subprocess for CLI presence check
    "S607",   # partial executable path in test setup
]
"app/api/deps.py" = [
    # FastAPI dependency injection patterns
]
"app/models/**/*.py" = [
    "RUF012", # mutable-class-default (SQLModel/Pydantic)
]
"app/types/__init__.py" = [
    "A005",   # module shadows standard library but uses qualified imports
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"  # Consistent line endings (changed from "auto")
docstring-code-format = true  # Format code blocks in docstrings
docstring-code-line-length = "dynamic"

# MyPy configuration
[tool.mypy]
python_version = "3.13"
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true
show_column_numbers = true
pretty = true
color_output = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "pgvector.*",
    "nats.*",
    "strawberry.*",
    "opentelemetry.*",
    "redis.*",
    "openai.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
strict_optional = false
ignore_errors = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: fast, pure logic",
    "component: http + db",
    "integration: db + nats/pgvector/workers",
    "e2e: end-to-end scenarios",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    # Temporarily exclude auth modules until user management lands
    "app/infra/auth.py",
    "app/api/v1/auth.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "TYPE_CHECKING",
]
show_missing = true
skip_covered = false
skip_empty = true

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "alembic/versions"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

[tool.bandit.assert_used]
skips = ["*/tests/*"]
