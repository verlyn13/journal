[project]
name = "journal-api"
version = "0.1.0"
description = "Modern FastAPI backend with pgvector, FTS, and event sourcing"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Verlyn13" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi[standard]>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "sqlmodel>=0.0.24",
    "sqlalchemy[asyncio]>=2.0.35",
    "asyncpg>=0.29.0",
    "alembic>=1.13.2",
    "pydantic>=2.8.0",
    "pydantic-settings>=2.4.0",
    "pyjwt[crypto]>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "redis>=5.0.8",
    "nats-py>=2.7.0",
    "pgvector>=0.2.5",
    "strawberry-graphql[fastapi]>=0.235.0",
    "opentelemetry-api>=1.26.0",
    "opentelemetry-sdk>=1.26.0",
    "opentelemetry-instrumentation-fastapi>=0.47b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.47b0",
    "openai>=1.40.0", # For embeddings (optional)
    "numpy>=1.24.0", # For vector operations
    "psycopg2-binary>=2.9.10",
    "opentelemetry-exporter-otlp-proto-grpc>=1.36.0",
    "markdown-it-py>=4.0.0",
    "bleach>=6.2.0",
]

[tool.uv]
dev-dependencies = [
    # Testing
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.27.0",
    "factory-boy>=3.3.0",
    "faker>=25.0.0",
    # Code quality
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
    # Security
    "bandit>=1.7.5",
    "safety>=3.2.0",
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    # Development tools
    "ipython>=8.26.0",
    "rich>=13.7.0",
    "typer>=0.12.0",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.8.0",
    "libcst>=1.8.2",
]

[project.scripts]
journal-api = "app.main:main"
journal-worker = "app.workers.embedding_consumer:main"

[project.urls]
Homepage = "https://github.com/verlyn13/journal"
Repository = "https://github.com/verlyn13/journal"
Documentation = "https://github.com/verlyn13/journal/tree/main/docs"
Issues = "https://github.com/verlyn13/journal/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Hatchling build configuration
[tool.hatch.build.targets.wheel]
packages = ["app"]

# Ruff configuration (v0.8.4+ with latest features)
[tool.ruff]
target-version = "py311"
line-length = 100
fix = true
unsafe-fixes = false  # Prevent unsafe auto-fixes
show-fixes = true
preview = true  # Enable preview features for latest improvements
output-format = "concise"  # More readable output
cache-dir = ".ruff_cache"
respect-gitignore = true
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    "*.egg-info",
    "alembic/versions",
]

[tool.ruff.lint]
select = [
    "ALL",  # Enable all rules, then selectively disable
]
ignore = [
    # Line length (handled by formatter)
    "E501",
    
    # Complexity limits (FastAPI endpoints can be complex)
    "PLR0913", # too-many-arguments
    "PLR0912", # too-many-branches  
    "PLR0915", # too-many-statements
    "PLR2004", # magic-value-comparison
    "C901",    # too-complex
    
    # FastAPI specific - these are being addressed in a separate PR
    "FAST002", # FastAPI dependency without Annotated
    "B904",    # raise-without-from
    "ANN201",  # missing-return-type-annotation-public-function
    "ARG001",  # unused-function-argument
    "DOC201",  # return-not-documented-in-docstring
    "DOC501",  # raised-exception-missing-from-docstring
    "CPY001",  # missing-copyright-notice
    "INP001",  # implicit-namespace-package
    
    # Boolean traps (FastAPI uses them)
    "FBT001",  # boolean-type-hint-positional-argument
    "FBT002",  # boolean-default-value-positional-argument
    "FBT003",  # boolean-positional-value-in-call
    
    # Documentation (we handle separately)
    "D100",    # missing-module-docstring
    "D101",    # missing-class-docstring
    "D102",    # missing-method-docstring
    "D103",    # missing-function-docstring
    "D104",    # missing-package-docstring
    "D105",    # missing-magic-method-docstring
    "D106",    # missing-nested-class-docstring
    "D107",    # missing-init-docstring
    
    # SQLModel/Pydantic specific
    "TCH001",  # typing-only-first-party-import
    "TCH002",  # typing-only-third-party-import
    "TCH003",  # typing-only-stdlib-import
    "RUF012",  # mutable-class-default (Pydantic handles this)
    
    # Allow these patterns
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
    "ANN401",  # any-type (sometimes needed)
    "S101",    # assert-used (fine in tests)
    "TRY003",  # raise-vanilla-args
    "EM101",   # raw-string-in-exception
    "EM102",   # f-string-in-exception
    "SLF001",  # private-member-access (needed for tests)
    "PD901",   # pandas-df-variable-name
    "COM812",  # trailing-comma-missing (conflicts with formatter)
    "ISC001",  # single-line-implicit-string-concatenation
]

# Enable auto-fixing for these categories
fixable = [
    "F",     # pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings  
    "I",     # isort
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "PIE",   # flake8-pie
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "PTH",   # flake8-use-pathlib
    "RUF",   # ruff-specific
    "NPY",   # numpy-specific
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "TRY",   # tryceratops
    "FLY",   # flynt
    "PERF",  # performance
    "FURB",  # refurb
    "LOG",   # flake8-logging
    "ASYNC", # flake8-async
]

# Rules to never auto-fix (require human review)
unfixable = [
    "ERA",   # commented-out-code
    "T20",   # flake8-print
    "F401",  # unused-import (might be intentional)
    "F841",  # unused-variable (might be intentional)
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false
combine-as-imports = true
known-first-party = ["app", "tests"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
force-single-line = false
lines-after-imports = 2
lines-between-types = 1

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 15
max-returns = 6
max-statements = 50

[tool.ruff.lint.pycodestyle]
max-doc-length = 100
ignore-overlong-task-comments = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.Query",
    "fastapi.Path",
    "fastapi.Body",
    "fastapi.Header",
    "fastapi.File",
    "fastapi.Form",
    "fastapi.Cookie",
    "sqlalchemy.Column",
    "sqlmodel.Field",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true
parametrize-names-type = "csv"
parametrize-values-type = "list"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"
avoid-escape = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # assert-used
    "PLR2004", # magic-value-comparison
    "ARG",    # unused-arguments (common in fixtures)
    "ANN",    # type annotation rules relaxed in tests
    "FBT",    # boolean-trap (test parameters)
    "SLF001", # private-member-access
    "D",      # docstrings not needed in tests
    "DOC",    # relax docstring nitpicks for tests
    "PLR6301", # method-could-be-function (pytest test classes)
    "DTZ003", # allow naive datetime in tests
    "DTZ001", # datetime without tzinfo allowed in tests
    "BLE001", # allow broad except in tests
    "PLC0415", # allow imports inside tests when needed
    "RUF029", # async-without-await in test helpers
    "PT001",  # fixture parentheses nits
    "PT018",  # composite assertions
    "T201",   # print used in test output
    "PERF401", # list comprehensions and extend in tests
    "S105",   # hardcoded-password-strings in test data
    "S608",   # SQL string construction in tests
    "PLR6201", # set literal suggestion noise in tests
    "TRY002",  # require custom exception types
    "N801",   # class naming in test helpers
    "PLR1711", # useless return at end of function
    "PLC1901", # simplify falsey comparisons
    "PLR0914", # too many locals in big integration tests
]
"alembic/**/*.py" = [
    "D",      # docstrings not needed in migrations
    "E402",   # module-import-not-at-top
    "INP001", # implicit-namespace-package
    "T201",   # print allowed in migration env
]
".tools/*.py" = ["T201"]
"test_debug.py" = ["T201"]
"app/api/deps.py" = [
    "ARG001", # unused-function-argument (dependency injection)
]
"app/models/**/*.py" = [
    "RUF012", # mutable-class-default (SQLModel/Pydantic)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true
show_column_numbers = true
pretty = true
color_output = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "pgvector.*",
    "nats.*",
    "strawberry.*",
    "opentelemetry.*",
    "redis.*",
    "openai.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
strict_optional = false
ignore_errors = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: fast, pure logic",
    "component: http + db",
    "integration: db + nats/pgvector/workers",
    "e2e: end-to-end scenarios",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    # Temporarily exclude auth modules until user management lands
    "app/infra/auth.py",
    "app/api/v1/auth.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "TYPE_CHECKING",
]
show_missing = true
skip_covered = false
skip_empty = true

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "alembic/versions"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

[tool.bandit.assert_used]
skips = ["*/tests/*"]
