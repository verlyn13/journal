name: Web Tests

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  vitest:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/web
    steps:
      - uses: actions/checkout@v4

      # Bun for web unit tests
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache bun store
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lock') }}

      - name: Install deps
        run: bun install

      - name: Print tool versions
        run: |
          echo "Node:" && node -v || true
          echo "Bun:" && bun -v
          echo "Vitest:" && bun x vitest --version

      - name: Run Vitest (CI profile)
        env:
          CI: "true"
        run: |
          bun x vitest run \
            --coverage --reporter=verbose \
            --threads=false \
            --logHeapUsage

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vitest-coverage
          path: apps/web/coverage

  playwright:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg16
        ports: [ "5432:5432" ]
        env:
          POSTGRES_DB: journal
          POSTGRES_USER: journal
          POSTGRES_PASSWORD: journal
        options: >-
          --health-cmd="pg_isready -U journal -d journal -h 127.0.0.1"
          --health-interval=2s --health-timeout=5s --health-retries=30
    steps:
      - uses: actions/checkout@v4

      # Node for Playwright runner
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      # Python/uv for API + Alembic
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv==0.4.*  # fast & hermetic

      - name: API deps
        working-directory: apps/api
        run: uv sync --all-extras --dev

      - name: Echo critical env
        env:
          JOURNAL_DB_URL: postgresql+asyncpg://journal:journal@localhost:5432/journal
          JOURNAL_DB_SYNC_URL: postgresql://journal:journal@localhost:5432/journal
        run: |
          echo "JOURNAL_DB_URL=$JOURNAL_DB_URL"
          echo "JOURNAL_DB_SYNC_URL=$JOURNAL_DB_SYNC_URL"

      - name: DB auth wait (libpq)
        env:
          JOURNAL_DB_SYNC_URL: postgresql://journal:journal@localhost:5432/journal
        working-directory: apps/api
        run: |
          uv run python - <<'PY'
          import os, time, psycopg2
          url = os.environ["JOURNAL_DB_SYNC_URL"]
          for i in range(60):
              try:
                  conn = psycopg2.connect(url)
                  conn.close()
                  print("DB auth succeeded")
                  break
              except Exception as e:
                  print(f"DB auth attempt {i+1}/60 failed: {e}")
                  time.sleep(1)
          else:
              raise SystemExit("DB never became ready for password auth")
          PY

      - name: Alembic upgrade
        env:
          JOURNAL_DB_URL: postgresql+asyncpg://journal:journal@localhost:5432/journal
        working-directory: apps/api
        run: |
          set -e
          uv run alembic -c alembic.ini upgrade head | tee -a /tmp/alembic.log

      - name: Post-migration probe
        env:
          JOURNAL_DB_SYNC_URL: postgresql://journal:journal@localhost:5432/journal
        working-directory: apps/api
        run: |
          uv run python - <<'PY'
          import os, psycopg2
          conn = psycopg2.connect(os.environ["JOURNAL_DB_SYNC_URL"])
          cur = conn.cursor()
          cur.execute("select 1")
          print("DB probe:", cur.fetchone())
          conn.close()
          PY

      - name: Start API (background)
        env:
          PORT: "5000"
        working-directory: apps/api
        run: |
          nohup uv run fastapi run app/main.py --host 0.0.0.0 --port 5000 > /tmp/api.log 2>&1 &
          echo $! > /tmp/api.pid

      - name: Wait for /health
        run: |
          for i in $(seq 1 60); do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5000/health || true)
            if [ "$code" = "200" ]; then echo "API healthy"; exit 0; fi
            sleep 1
          done
          echo "Health never returned 200"
          cat /tmp/api.log || true
          exit 1

      - name: Install Playwright
        run: npx --yes playwright@latest install --with-deps

      - name: Run Playwright (debug logs)
        env:
          DEBUG: pw:*
          BASE_URL: http://127.0.0.1:5000
        working-directory: apps/web
        run: npx --yes playwright@latest test --reporter=line

      - name: Upload API log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-log
          path: /tmp/api.log