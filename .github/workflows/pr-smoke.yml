name: PR Smoke Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.13'

jobs:
  # Gate 1: Check deployment readiness
  readiness:
    name: Phase 0 Gate - Readiness Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Check required files
        run: |
          echo "Checking deployment configuration..."
          MISSING=""

          [ -f ".env.schema" ] || MISSING="$MISSING .env.schema"
          [ -f "deploy/vercel.json" ] || MISSING="$MISSING deploy/vercel.json"
          [ -f "deploy/railway.toml" ] || MISSING="$MISSING deploy/railway.toml"
          [ -f "deploy/smoke/healthcheck.sh" ] || MISSING="$MISSING healthcheck.sh"
          [ -f "deploy/smoke/db_probe.py" ] || MISSING="$MISSING db_probe.py"
          [ -f "apps/web/bun.lockb" ] || MISSING="$MISSING bun.lockb"

          if [ -n "$MISSING" ]; then
            echo "❌ Missing files:$MISSING"
            exit 1
          fi

          echo "✅ All deployment files present"

      - name: Validate environment schema
        run: |
          echo "Validating .env.schema format..."
          python3 -c "
          import re
          with open('.env.schema', 'r') as f:
              content = f.read()
              # Check for required sections
              assert '# FRONTEND VARIABLES' in content, 'Missing frontend section'
              assert '# BACKEND VARIABLES' in content, 'Missing backend section'
              assert '# DATABASE VARIABLES' in content, 'Missing database section'

              # Count variable definitions
              vars = re.findall(r'^[A-Z_]+=', content, re.MULTILINE)
              print(f'✅ Found {len(vars)} environment variables defined')
              assert len(vars) > 20, 'Too few variables defined'
          "

  # Gate 2: Frontend build validation
  frontend:
    name: Phase 3 Gate - Frontend Build
    runs-on: ubuntu-latest
    needs: readiness
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Bun
        uses: oven-sh/setup-bun@4bc047ad259df6fc24a6c9b0f9a0cb08cf17fbe5
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: apps/web
        run: bun install

      - name: Type check
        working-directory: apps/web
        run: bun run quality:types

      - name: Build frontend
        working-directory: apps/web
        run: bun run build

      - name: Check bundle size
        working-directory: apps/web
        run: |
          SIZE=$(du -sk dist | cut -f1)
          echo "Bundle size: ${SIZE}KB"

          # Fail if over 15MB
          if [ "$SIZE" -gt 15360 ]; then
            echo "❌ Bundle size exceeds 15MB limit"
            exit 1
          fi

          echo "✅ Bundle size within limits"

      - name: Upload build artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        with:
          name: frontend-build
          path: apps/web/dist
          retention-days: 7

  # Gate 3: API smoke test (local)
  api-smoke:
    name: Phase 2 Gate - API Health Check
    runs-on: ubuntu-latest
    needs: readiness
    services:
      postgres:
        image: pgvector/pgvector:pg16@sha256:c3c84b85691a264aa3c5b8fc1d611e67d42b0cca8596e3d3d22dc2424c12c4e2
        env:
          POSTGRES_USER: journal
          POSTGRES_PASSWORD: journal
          POSTGRES_DB: journal
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U journal"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@208b0c0ee42039b2cbf5fd3ca0ec7d6d8a49336f

      - name: Install API dependencies
        working-directory: apps/api
        run: uv sync --all-extras --dev

      - name: Run migrations
        working-directory: apps/api
        env:
          DATABASE_URL_SYNC: postgresql+psycopg://journal:journal@localhost:5432/journal
        run: |
          uv run alembic -x sqlalchemy.url=$DATABASE_URL_SYNC upgrade head

      - name: Start API server
        working-directory: apps/api
        env:
          JOURNAL_DB_URL: postgresql+asyncpg://journal:journal@localhost:5432/journal
          REDIS_URL: redis://localhost:6379/0
          JOURNAL_ENV: test
          PORT: 5000
        run: |
          uv run uvicorn app.main:app --host 0.0.0.0 --port 5000 &
          echo $! > /tmp/api.pid

          # Wait for startup
          for i in {1..30}; do
            if curl -f http://localhost:5000/health; then
              echo "API started successfully"
              break
            fi
            echo "Waiting for API... ($i/30)"
            sleep 1
          done

      - name: Run enhanced database probe
        env:
          DATABASE_URL: postgresql://journal:journal@localhost:5432/journal
        run: |
          cd apps/api
          uv run python ../../deploy/smoke/db_probe.py

      - name: Run database load test
        env:
          DATABASE_URL: postgresql://journal:journal@localhost:5432/journal
          DB_LOAD_N: 5
        run: |
          cd apps/api
          uv run python ../../deploy/smoke/db_load.py

      - name: Run API smoke test
        env:
          API_URL: http://localhost:5000
        run: |
          chmod +x deploy/smoke/healthcheck.sh
          bash deploy/smoke/healthcheck.sh

      - name: Stop API server
        if: always()
        run: |
          if [ -f /tmp/api.pid ]; then
            kill $(cat /tmp/api.pid) || true
          fi

  # Gate 4: Database probe
  database:
    name: Phase 1 Gate - Database Probe
    runs-on: ubuntu-latest
    needs: readiness
    services:
      postgres:
        image: pgvector/pgvector:pg16@sha256:c3c84b85691a264aa3c5b8fc1d611e67d42b0cca8596e3d3d22dc2424c12c4e2
        env:
          POSTGRES_USER: journal
          POSTGRES_PASSWORD: journal
          POSTGRES_DB: journal
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U journal"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@208b0c0ee42039b2cbf5fd3ca0ec7d6d8a49336f

      - name: Install dependencies
        working-directory: apps/api
        run: uv sync --all-extras --dev

      - name: Enable pgvector
        env:
          PGPASSWORD: journal
        run: |
          psql -h localhost -U journal -d journal -c "CREATE EXTENSION IF NOT EXISTS vector;"
          psql -h localhost -U journal -d journal -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"
          psql -h localhost -U journal -d journal -c "CREATE EXTENSION IF NOT EXISTS btree_gin;"

      - name: Run enhanced database probe
        env:
          DATABASE_URL: postgresql://journal:journal@localhost:5432/journal
        run: |
          cd apps/api
          uv run python ../../deploy/smoke/db_probe.py

  # Gate 5: Full smoke test (all services)
  full-smoke:
    name: Full System Smoke Test
    runs-on: ubuntu-latest
    needs: [frontend, api-smoke, database]
    if: success()
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Summary
        run: |
          echo "## ✅ All smoke tests passed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Gates Passed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 0: Readiness check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 1: Database operational" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 2: API health check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 3: Frontend build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Deploy to preview environment" >> $GITHUB_STEP_SUMMARY
          echo "2. Run integration tests" >> $GITHUB_STEP_SUMMARY
          echo "3. Manual verification" >> $GITHUB_STEP_SUMMARY
          echo "4. Merge to main" >> $GITHUB_STEP_SUMMARY

      - name: Set commit status (push only)
        if: always() && github.event_name == 'push'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const status = context.job.status === 'success' ? 'success' : 'failure';
            const description = status === 'success'
              ? 'All deployment gates passed'
              : 'Some deployment gates failed';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'deployment/smoke-tests'
            });
