name: API CI (Deprecated)

on:
  workflow_dispatch:
    inputs:
      note:
        description: "Legacy API CI; use api-tests.yml and ci.yml for routine checks"
        required: false
        default: ""

env:
  PYTHON_VERSION: "3.12"
  UV_CACHE_DIR: /tmp/.uv-cache
  # Infisical CLI not required for most API CI jobs
  INFISICAL_CLI_REQUIRED: "false"

jobs:
  lint-and-format:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: apps/api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
      
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('apps/api/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-
      
      - name: Install dependencies
        run: uv sync --all-extras --dev
      
      - name: Run ruff check
        run: uv run ruff check app/
      
      - name: Run ruff format check
        run: uv run ruff format --check app/
      
      - name: Run mypy type checking
        run: uv run mypy app/

  test:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: apps/api
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: journal_test
          POSTGRES_USER: journal
          POSTGRES_PASSWORD: journal
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      nats:
        image: nats:2-alpine
        ports:
          - 4222:4222
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
      
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('apps/api/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-
      
      - name: Install dependencies
        run: uv sync --all-extras --dev
      
      - name: Run database migrations
        run: uv run alembic upgrade head
        env:
          JOURNAL_DB_URL: postgresql+asyncpg://journal:journal@localhost:5432/journal_test
      
      - name: Run tests with coverage
        run: |
          uv run coverage run -m pytest -v
          uv run coverage report --show-missing
          uv run coverage xml
        env:
          JOURNAL_DB_URL: postgresql+asyncpg://journal:journal@localhost:5432/journal_test
          JOURNAL_REDIS_URL: redis://localhost:6379/0
          JOURNAL_NATS_URL: nats://localhost:4222
          JOURNAL_JWT_SECRET: test-secret-key-for-ci
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: apps/api/coverage.xml
          flags: api
          name: api-coverage
          fail_ci_if_error: false
      
      - name: Minimize uv cache
        run: uv cache prune --ci

  integration-test:
    runs-on: ubuntu-24.04
    needs: [lint-and-format, test]
    defaults:
      run:
        working-directory: apps/api
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: journal_integration
          POSTGRES_USER: journal
          POSTGRES_PASSWORD: journal
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      nats:
        image: nats:2-alpine
        ports:
          - 4222:4222
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: uv sync --all-extras --dev
      
      - name: Run database migrations
        run: |
          export PGUSER=journal
          uv run alembic upgrade head
        env:
          DATABASE_URL: postgresql+asyncpg://journal:journal@localhost:5432/journal_integration
          DATABASE_URL_SYNC: postgresql://journal:journal@localhost:5432/journal_integration
          JOURNAL_DB_URL: postgresql+asyncpg://journal:journal@localhost:5432/journal_integration

      - name: Start API server in background
        run: |
          uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        env:
          DATABASE_URL: postgresql+asyncpg://journal:journal@localhost:5432/journal_integration
          DATABASE_URL_SYNC: postgresql://journal:journal@localhost:5432/journal_integration
          JOURNAL_DB_URL: postgresql+asyncpg://journal:journal@localhost:5432/journal_integration
          JOURNAL_REDIS_URL: redis://localhost:6379/0
          JOURNAL_NATS_URL: nats://localhost:4222
          JOURNAL_JWT_SECRET: test-secret-key-for-integration

      - name: Wait for API readiness
        run: |
          # Integration tests need full readiness
          SERVER_URL=http://localhost:8000 MAX_RETRIES=30 REQUIRES_READY=1 ./scripts/wait_for_server.sh
      
      - name: Run integration tests
        run: uv run pytest tests/integration/ -v
        env:
          API_BASE_URL: http://localhost:8000
          JOURNAL_JWT_SECRET: test-secret-key-for-integration

  security-scan:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: apps/api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: uv sync --all-extras --dev
      
      - name: Run safety check for vulnerabilities
        run: uv run safety check
      
      - name: Run bandit security linter
        run: uv run bandit -r app/ -f json -o bandit-results.json || true
      
      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: apps/api/bandit-results.json
