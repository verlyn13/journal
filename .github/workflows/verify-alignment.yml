# Verify Python 3.13 and Ruff 0.13.0 Alignment
name: Verify Alignment
on: [push, pull_request]

jobs:
  verify-alignment:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: '3.13'

      - uses: astral-sh/setup-uv@208b0c0ee42039b2cbf5fd3ca0ec7d6d8a49336f
        with:
          version: "latest"

      - name: Python and Ruff versions
        run: |
          python3 --version | tee python-version.txt
          # Pin Ruff to 0.13.0 for alignment
          uvx ruff==0.13.0 --version | tee ruff-version.txt

          # Verify Python 3.13
          grep -q "^Python 3\.13\." python-version.txt || (echo "❌ Not Python 3.13"; exit 1)
          echo "✅ Python 3.13 verified"

          # Verify Ruff 0.13.0
          grep -q "^ruff 0\.13\.0" ruff-version.txt || (echo "❌ Not Ruff 0.13.0"; exit 1)
          echo "✅ Ruff 0.13.0 verified"

      - name: Effective Ruff config
        working-directory: apps/api
        run: |
          # Use the pinned Ruff version for config introspection
          uvx ruff==0.13.0 check . --show-settings 2>&1 | tee ../../ruff-config.txt

          # Must show preview = true and explicit-preview-rules = true
          grep -q 'linter.preview = enabled' ../../ruff-config.txt || (echo "❌ Ruff preview off"; exit 1)
          grep -q 'linter.explicit_preview_rules = true' ../../ruff-config.txt || (echo "❌ explicit-preview-rules off"; exit 1)
          echo "✅ Ruff configuration verified"

      - name: Configuration consistency check
        shell: bash
        run: |
          set -euo pipefail

          echo "## Scan: redundant tool blocks in *.toml ([tool.black|isort|flake8])"
          matches="$(find . -name 'pyproject.toml' -type f | xargs grep -InE '^\[tool\.(black|isort|flake8)\]' 2>/dev/null || true)"
          if [[ -n "$matches" ]]; then
            echo "$matches"
            echo "❌ Found redundant tool blocks in pyproject.toml files"
            echo "These legacy formatters/linters should be removed - Ruff handles all formatting and linting"
            exit 1
          else
            echo "✅ No redundant tool blocks found"
          fi

      - name: Lint + Format checks
        working-directory: apps/api
        run: |
          uvx ruff==0.13.0 clean
          uvx ruff==0.13.0 check . --config pyproject.toml --output-format=github
          uvx ruff==0.13.0 format --config pyproject.toml --check .
          echo "✅ All linting and formatting checks pass"

      - name: Docker Python version check
        shell: bash
        run: |
          set -euo pipefail
          fail=0

          echo "## Checking Python versions in Dockerfiles"
          while IFS= read -r -d '' dockerfile; do
            # Skip backup directories
            case "$dockerfile" in
              */.backups/*|*/docs.backup.*/*|*/node_modules/*) continue ;;
            esac

            if grep -qE '^FROM .*python' "$dockerfile"; then
              if ! grep -q 'python:3.13' "$dockerfile"; then
                echo "❌ $dockerfile not using Python 3.13"
                fail=1
              else
                echo "✓ $dockerfile uses Python 3.13"
              fi
            fi
          done < <(find . -type f -name 'Dockerfile*' -print0)

          if [[ $fail -eq 0 ]]; then
            echo "✅ All Dockerfiles use Python 3.13"
          else
            exit 1
          fi

      - name: Docs drift check
        run: |
          # TODO: After merging to main, ensure ripgrep regex patterns work correctly
          # Currently using simplified grep due to CI environment issues
          # This should be revisited to use proper regex validation
          if [ -f "./scripts/validate-docs.sh" ]; then
            ./scripts/validate-docs.sh
          else
            echo "⚠️ validate-docs.sh not found, skipping docs check"
          fi

      - name: Generate alignment report
        if: always()
        run: |
          echo "# Python 3.13 & Ruff 0.13.0 Alignment Report" > alignment-report.txt
          echo "Generated: $(date)" >> alignment-report.txt
          echo "" >> alignment-report.txt

          if [ -f python-version.txt ]; then
            echo "## Python Version" >> alignment-report.txt
            cat python-version.txt >> alignment-report.txt
            echo "" >> alignment-report.txt
          fi

          if [ -f ruff-version.txt ]; then
            echo "## Ruff Version" >> alignment-report.txt
            cat ruff-version.txt >> alignment-report.txt
            echo "" >> alignment-report.txt
          fi

          if [ -f ruff-config.txt ]; then
            echo "## Ruff Configuration (excerpt)" >> alignment-report.txt
            grep -E "preview|explicit" ruff-config.txt | head -10 >> alignment-report.txt
            echo "" >> alignment-report.txt
          fi

          echo "## Validation Results" >> alignment-report.txt
          echo "See workflow run for detailed results" >> alignment-report.txt

      - name: Upload alignment report
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        with:
          name: alignment-report
          path: |
            alignment-report.txt
            ruff-config.txt
            python-version.txt
            ruff-version.txt
