name: API Tests

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
    inputs:
      markers:
        description: "pytest -m markers (e.g., 'unit or component')"
        required: false
        default: ""
      ksubset:
        description: "pytest -k subset filter"
        required: false
        default: ""

jobs:
  unit_component:
    name: Unit + Component
    runs-on: ubuntu-24.04
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: journal
          POSTGRES_PASSWORD: journal
          POSTGRES_DB: journal
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U journal" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 5
    defaults:
      run:
        working-directory: apps/api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Install deps
        run: uv sync --all-extras --dev
      - name: Run unit+component tests (strict)
        env:
          TEST_DB_URL: postgresql+asyncpg://journal:journal@localhost:5433/journal
        run: |
          uv run pytest -m "unit or component" \
            --cov=app/api --cov=app/services --cov=app/infra/auth --cov=app/infra/conversion \
            --cov-report=term-missing --cov-report=xml --cov-report=html:htmlcov
      - name: Upload API unit+component coverage
        uses: actions/upload-artifact@v4
        with:
          name: api-unit-component-coverage
          path: |
            apps/api/htmlcov
            apps/api/coverage.xml

  integration:
    name: Integration
    runs-on: ubuntu-24.04
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: journal
          POSTGRES_PASSWORD: journal
          POSTGRES_DB: journal
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U journal" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 5
      nats:
        image: nats:2-alpine
        command: ["-js"]
        ports:
          - 4222:4222
          - 8222:8222
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: apps/api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Install deps
        run: uv sync --all-extras --dev
      - name: Wait for PostgreSQL
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          for i in {1..60}; do
            if pg_isready -h localhost -p 5433 -U journal; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... attempt $i/60"
            sleep 2
          done
          # Verify connection with psql
          PGPASSWORD=journal psql -h localhost -p 5433 -U journal -d journal -c "SELECT 1"
      - name: Alembic upgrade
        env:
          DATABASE_URL_SYNC: postgresql://journal:journal@localhost:5433/journal
        run: |
          cd apps/api
          uv run alembic -c alembic.ini upgrade head
      - name: Run integration tests
        env:
          TEST_DB_URL: postgresql+asyncpg://journal:journal@localhost:5433/journal
          JOURNAL_DB_URL: postgresql+asyncpg://journal:journal@localhost:5433/journal
          JOURNAL_REDIS_URL: redis://localhost:6380/0
          RUN_REAL_NATS: '1'
        run: |
          cd apps/api
          uv run pytest -m integration --cov=app/infra --cov=app/workers --cov=app/api/v1/search --cov-report=term-missing --cov-report=xml --cov-report=html:htmlcov
      - name: Upload API integration coverage
        uses: actions/upload-artifact@v4
        with:
          name: api-integration-coverage
          path: |
            apps/api/htmlcov
            apps/api/coverage.xml

  v2_auth:
    name: V2 Auth Suite
    runs-on: ubuntu-24.04
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: journal
          POSTGRES_PASSWORD: journal
          POSTGRES_DB: journal
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U journal" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: apps/api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Install deps
        run: uv sync --all-extras --dev
      - name: Prepare database
        env:
          TEST_DB_URL: postgresql+asyncpg://journal:journal@localhost:5433/journal
        run: |
          uv run alembic -c alembic.ini upgrade head
      - name: Run v2 auth tests
        env:
          TEST_DB_URL: postgresql+asyncpg://journal:journal@localhost:5433/journal
          JOURNAL_DB_URL: postgresql+asyncpg://journal:journal@localhost:5433/journal
          JOURNAL_REDIS_URL: redis://localhost:6380/0
        run: |
          uv run pytest tests/test_auth_v2.py -v --maxfail=1 \
            --junitxml=reports/junit-v2.xml
      - name: Upload v2 auth reports
        uses: actions/upload-artifact@v4
        with:
          name: api-v2-auth-reports
          path: |
            apps/api/reports/junit-v2.xml
