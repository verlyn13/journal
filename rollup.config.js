import commonjs from '@rollup/plugin-commonjs';
import resolve from '@rollup/plugin-node-resolve';
import terser from '@rollup/plugin-terser';
import autoprefixer from 'autoprefixer';
import cssnano from 'cssnano';
import postcssImport from 'postcss-import';
import filesize from 'rollup-plugin-filesize';
// Try importing CommonJS default export
import outputManifestPlugin from 'rollup-plugin-output-manifest';
import postcss from 'rollup-plugin-postcss';

const outputManifest = outputManifestPlugin.default || outputManifestPlugin;

import path from 'path'; // Keep path import
import { fileURLToPath } from 'url'; // Keep url import

const production = !process.env.ROLLUP_WATCH;
const buildDetail = process.env.BUILD_DETAIL === 'true';

// Helper function to create a timestamp string
const getTimestamp = () => {
  const now = new Date();
  return now.toLocaleString();
};

// Helper function to create a banner for the build output
const createBanner = () => {
  return `
/*
 * Journal Application Bundle
 * Built: ${getTimestamp()}
 * Environment: ${production ? 'production' : 'development'}
 *
 * This file is automatically generated by Rollup.
 * Do not edit directly.
 */
`;
};

// Define __dirname in ES module scope
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Custom onwarn handler to provide more detailed information about warnings
const onwarn = (warning, warn) => {
  // Always show deprecation warnings
  if (warning.code === 'DEPRECATED_FEATURE') {
  }

  // Show detailed information for other warnings when BUILD_DETAIL is true
  if (buildDetail || warning.code === 'CIRCULAR_DEPENDENCY') {
    const _location = warning.loc
      ? `${warning.loc.file}:${warning.loc.line}:${warning.loc.column}`
      : 'unknown location';

    // Show additional details for circular dependencies
    if (warning.code === 'CIRCULAR_DEPENDENCY') {
    }
  } else {
    // Use default warning behavior for non-detailed mode
    warn(warning);
  }
};

// Single configuration object matching the documentation example
export default {
  // Add onwarn handler
  onwarn,
  // Multiple named entries
  input: {
    main: 'src/js/main.js',
    styles: 'src/css/main.css', // CSS as a separate entry point
  },
  output: {
    dir: 'journal/static/gen/',
    format: 'es', // ES module format for JS
    sourcemap: !production,
    // Use [name] placeholder for entry JS files (main.js)
    entryFileNames: '[name].[hash].js',
    // Use [name] placeholder for CSS asset, [ext] for extension
    // This should name the output styles.[hash].css
    assetFileNames: '[name].[hash].[ext]',
    // Optional: Define chunk naming if code splitting occurs
    chunkFileNames: 'chunks/[name].[hash].js',
    banner: createBanner,
  },
  plugins: [
    resolve(), // Locates modules using the Node resolution algorithm
    commonjs(), // Converts CommonJS modules to ES6
    postcss({
      // Extract CSS into a separate file. Rollup handles naming via assetFileNames.
      extract: true,
      plugins: [
        postcssImport(), // Add this first to handle @import rules
        autoprefixer(), // Add vendor prefixes
        production &&
          cssnano({
            // Minify CSS in production
            preset: 'default',
          }),
      ],
      sourceMap: !production,
      minimize: production,
    }),
    production &&
      terser({
        format: {
          preamble: createBanner(), // Add the banner here
        },
      }), // Minify JS in production
    // Display bundle size information with simplified configuration
    filesize({
      showMinifiedSize: true,
      showGzippedSize: true,
      showBrotliSize: false, // Disable brotli size to avoid potential issues
      showTotal: true,
      theme: 'minimal',
      // Use a simple reporter to avoid NaN issues
      reporter: (_options, _bundle, { fileName, bundleSize, minSize, gzipSize }) => {
        // Only show warnings for JS files (not chunks) that are large
        if (bundleSize > 500000 && !fileName.includes('chunks/')) {
        }

        // Show more detailed information when BUILD_DETAIL is true
        if (buildDetail && bundleSize && !Number.isNaN(bundleSize)) {
          const originalKB = Math.round(bundleSize / 1024);
          const _minifiedKB = Math.round((minSize || 0) / 1024);
          const _gzippedKB = Math.round((gzipSize || 0) / 1024);

          if (originalKB > 0) {
          }
        }
      },
    }),
    // outputManifest with minimal config, should see both assets now
    outputManifest({
      fileName: 'manifest.json', // Output filename
      publicPath: 'gen/', // Prefix for manifest values (optional but good practice)
      // No custom generate needed!
      // Pretty print
      serializer: (manifest) => JSON.stringify(manifest, null, 2),
    }),
  ],
  watch: {
    clearScreen: false,
    buildDelay: 100, // Add a small delay to avoid excessive rebuilds
  },
};
