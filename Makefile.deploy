# Deployment Makefile for Journal Application
# Usage: make -f Makefile.deploy [target]

.PHONY: all build test deploy smoke help

# Configuration
SHELL := /bin/bash
.DEFAULT_GOAL := help

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Environment detection
ENV ?= development
ifeq ($(ENV),production)
	ENV_FILE := .env.production
else ifeq ($(ENV),staging)
	ENV_FILE := .env.staging
else
	ENV_FILE := .env.local
endif

# =============================================================================
# Help
# =============================================================================

help: ## Show this help message
	@echo -e "$(BLUE)Journal Deployment Makefile$(NC)"
	@echo -e "$(BLUE)============================$(NC)"
	@echo ""
	@echo "Usage: make -f Makefile.deploy [target]"
	@echo ""
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "Environment variables:"
	@echo "  ENV=$(ENV) (development|staging|production)"

# =============================================================================
# Build Targets
# =============================================================================

build: build-web build-api ## Build all components

build-web: ## Build frontend for production
	@echo -e "$(BLUE)Building frontend...$(NC)"
	cd apps/web && npm ci --legacy-peer-deps && npm run build
	@echo -e "$(GREEN)✓ Frontend built successfully$(NC)"

build-api: ## Prepare API for deployment
	@echo -e "$(BLUE)Preparing API...$(NC)"
	cd apps/api && uv sync --all-extras --dev
	@echo -e "$(GREEN)✓ API dependencies installed$(NC)"

# =============================================================================
# Local Development
# =============================================================================

dev: dev-api dev-web ## Start all services locally

dev-api: ## Start API server locally
	@echo -e "$(BLUE)Starting API server...$(NC)"
	cd apps/api && uv run uvicorn app.main:app \
		--host 0.0.0.0 \
		--port 5000 \
		--reload

dev-web: ## Start frontend dev server
	@echo -e "$(BLUE)Starting frontend dev server...$(NC)"
	cd apps/web && npm run dev

dev-worker: ## Start embedding worker
	@echo -e "$(BLUE)Starting embedding worker...$(NC)"
	cd apps/api && uv run python -m app.workers.embedding_consumer

# =============================================================================
# Database Operations
# =============================================================================

db-migrate: ## Run database migrations
	@echo -e "$(BLUE)Running database migrations...$(NC)"
	cd apps/api && \
		DATABASE_URL_SYNC=$${DATABASE_URL_SYNC:-$${DATABASE_URL}} \
		uv run alembic -x sqlalchemy.url=$${DATABASE_URL_SYNC} upgrade head
	@echo -e "$(GREEN)✓ Migrations complete$(NC)"

db-rollback: ## Rollback last migration
	@echo -e "$(YELLOW)Rolling back last migration...$(NC)"
	cd apps/api && \
		DATABASE_URL_SYNC=$${DATABASE_URL_SYNC:-$${DATABASE_URL}} \
		uv run alembic -x sqlalchemy.url=$${DATABASE_URL_SYNC} downgrade -1

db-reset: ## Reset database (DANGEROUS)
	@echo -e "$(RED)WARNING: This will reset the database!$(NC)"
	@read -p "Are you sure? [y/N] " -n 1 -r; echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		cd apps/api && \
		DATABASE_URL_SYNC=$${DATABASE_URL_SYNC:-$${DATABASE_URL}} \
		uv run alembic -x sqlalchemy.url=$${DATABASE_URL_SYNC} downgrade base && \
		uv run alembic -x sqlalchemy.url=$${DATABASE_URL_SYNC} upgrade head; \
	fi

db:snapshot: ## Create database snapshot
	@echo -e "$(BLUE)Creating database snapshot...$(NC)"
	./deploy/db/snapshot.sh

db:snapshot:schema: ## Create schema-only snapshot
	@echo -e "$(BLUE)Creating schema snapshot...$(NC)"
	./deploy/db/snapshot.sh --schema-only

db:snapshot:data: ## Create data-only snapshot
	@echo -e "$(BLUE)Creating data snapshot...$(NC)"
	./deploy/db/snapshot.sh --data-only

db:anonymize:dryrun: ## Preview anonymization changes
	@echo -e "$(BLUE)Previewing anonymization...$(NC)"
	python3 scripts/anonymize.py --dry-run

db:anonymize:execute: ## Apply anonymization changes
	@echo -e "$(YELLOW)Applying anonymization...$(NC)"
	python3 scripts/anonymize.py --execute

db:anonymize:validate: ## Validate for PII patterns
	@echo -e "$(BLUE)Validating for PII...$(NC)"
	python3 scripts/anonymize.py --validate

db:probe: ## Run comprehensive database probe (extensions, pgvector, FTS)
	@echo -e "$(BLUE)Running database probe...$(NC)"
	cd apps/api && uv run python ../../deploy/smoke/db_probe.py

db:load: ## Run database load test for connection pooling
	@echo -e "$(BLUE)Running database load test...$(NC)"
	cd apps/api && DB_LOAD_N=$${N:-10} uv run python ../../deploy/smoke/db_load.py

db:probe:extensions: ## Check specifically for required extensions
	@echo -e "$(BLUE)Checking database extensions...$(NC)"
	cd apps/api && DATABASE_URL_SYNC=$${DATABASE_URL_SYNC:-$${DATABASE_URL}} \
		psql $${DATABASE_URL_SYNC} -c "SELECT extname, extversion FROM pg_extension WHERE extname IN ('vector', 'pg_trgm', 'btree_gin') ORDER BY extname;"

# =============================================================================
# Testing
# =============================================================================

test: test-unit test-integration ## Run all tests

test-unit: ## Run unit tests
	@echo -e "$(BLUE)Running unit tests...$(NC)"
	cd apps/api && uv run pytest tests/unit -v
	cd apps/web && npm run test:run
	@echo -e "$(GREEN)✓ Unit tests passed$(NC)"

test-integration: ## Run integration tests
	@echo -e "$(BLUE)Running integration tests...$(NC)"
	cd apps/api && uv run pytest tests/integration -v
	@echo -e "$(GREEN)✓ Integration tests passed$(NC)"

test-e2e: ## Run end-to-end tests
	@echo -e "$(BLUE)Running E2E tests...$(NC)"
	npx playwright test
	@echo -e "$(GREEN)✓ E2E tests passed$(NC)"

# =============================================================================
# Smoke Tests
# =============================================================================

smoke: smoke-api smoke-db ## Run all smoke tests

smoke-api: ## Test API health
	@echo -e "$(BLUE)Running API smoke test...$(NC)"
	@bash deploy/smoke/healthcheck.sh
	@echo -e "$(GREEN)✓ API smoke test passed$(NC)"

smoke-db: ## Test database connectivity
	@echo -e "$(BLUE)Running database smoke test...$(NC)"
	@python3 deploy/smoke/db_probe.py
	@echo -e "$(GREEN)✓ Database smoke test passed$(NC)"

smoke-redis: ## Test Redis connectivity
	@echo -e "$(BLUE)Testing Redis connection...$(NC)"
	@redis-cli -u "$${REDIS_URL:-redis://localhost:6380}" ping || \
		(echo -e "$(RED)✗ Redis connection failed$(NC)" && exit 1)
	@echo -e "$(GREEN)✓ Redis connected$(NC)"

smoke-full: smoke-api smoke-db smoke-redis ## Run all smoke tests including Redis

# =============================================================================
# Deployment
# =============================================================================

deploy-web-vercel: build-web ## Deploy frontend to Vercel
	@echo -e "$(BLUE)Deploying frontend to Vercel...$(NC)"
	cd apps/web && vercel --prod
	@echo -e "$(GREEN)✓ Frontend deployed$(NC)"

deploy-api-railway: ## Deploy API to Railway
	@echo -e "$(BLUE)Deploying API to Railway...$(NC)"
	railway up -d
	@echo -e "$(GREEN)✓ API deployed$(NC)"

deploy-check: ## Verify deployment readiness
	@echo -e "$(BLUE)Checking deployment readiness...$(NC)"
	@echo -n "Checking .env.schema... "
	@test -f .env.schema && echo -e "$(GREEN)✓$(NC)" || echo -e "$(RED)✗$(NC)"
	@echo -n "Checking package-lock.json... "
	@test -f apps/web/package-lock.json && echo -e "$(GREEN)✓$(NC)" || echo -e "$(RED)✗$(NC)"
	@echo -n "Checking vercel.json... "
	@test -f deploy/vercel.json && echo -e "$(GREEN)✓$(NC)" || echo -e "$(RED)✗$(NC)"
	@echo -n "Checking railway.toml... "
	@test -f deploy/railway.toml && echo -e "$(GREEN)✓$(NC)" || echo -e "$(RED)✗$(NC)"
	@echo -e "$(GREEN)Deployment readiness check complete$(NC)"

# =============================================================================
# Quality Checks
# =============================================================================

lint: ## Run linters
	@echo -e "$(BLUE)Running linters...$(NC)"
	cd apps/api && uv run ruff check .
	cd apps/web && npm run quality:lint
	@echo -e "$(GREEN)✓ Linting passed$(NC)"

format: ## Format code
	@echo -e "$(BLUE)Formatting code...$(NC)"
	cd apps/api && uv run ruff format .
	cd apps/web && npx biome format --write .
	@echo -e "$(GREEN)✓ Code formatted$(NC)"

typecheck: ## Run type checking
	@echo -e "$(BLUE)Running type checks...$(NC)"
	cd apps/api && uv run mypy app
	cd apps/web && npm run quality:types
	@echo -e "$(GREEN)✓ Type checking passed$(NC)"

quality: lint typecheck test-unit ## Run all quality checks

# =============================================================================
# Environment Management
# =============================================================================

env-validate: ## Validate environment variables against schema
	@echo -e "$(BLUE)Validating environment variables...$(NC)"
	@python3 deploy/scripts/validate_env.py || true
	@echo -e "$(GREEN)✓ Environment validation complete$(NC)"

env-export: ## Export environment template
	@echo -e "$(BLUE)Exporting environment template...$(NC)"
	@grep -E '^[A-Z_]+=' .env.schema | sed 's/=.*/=/' > .env.template
	@echo -e "$(GREEN)✓ Template exported to .env.template$(NC)"

# =============================================================================
# Utility
# =============================================================================

clean: ## Clean build artifacts
	@echo -e "$(BLUE)Cleaning build artifacts...$(NC)"
	rm -rf apps/web/dist apps/web/node_modules apps/api/.ruff_cache
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@echo -e "$(GREEN)✓ Cleaned$(NC)"

install-deps: ## Install all dependencies
	@echo -e "$(BLUE)Installing dependencies...$(NC)"
	cd apps/web && npm ci --legacy-peer-deps
	cd apps/api && uv sync --all-extras --dev
	@echo -e "$(GREEN)✓ Dependencies installed$(NC)"

docker-up: ## Start Docker services (PostgreSQL, Redis, NATS)
	@echo -e "$(BLUE)Starting Docker services...$(NC)"
	docker-compose up -d postgres redis nats
	@echo -e "$(GREEN)✓ Services started$(NC)"

docker-down: ## Stop Docker services
	@echo -e "$(BLUE)Stopping Docker services...$(NC)"
	docker-compose down
	@echo -e "$(GREEN)✓ Services stopped$(NC)"

logs-api: ## Tail API logs
	@if [ -f /tmp/api.log ]; then \
		tail -f /tmp/api.log; \
	else \
		echo "No API logs found"; \
	fi

logs-worker: ## Tail worker logs
	@if [ -f /tmp/worker.log ]; then \
		tail -f /tmp/worker.log; \
	else \
		echo "No worker logs found"; \
	fi

# =============================================================================
# CI Targets
# =============================================================================

ci: quality test smoke ## Run full CI pipeline locally
	@echo -e "$(GREEN)✓ CI pipeline passed$(NC)"

ci-minimal: lint test-unit smoke-api ## Run minimal CI checks
	@echo -e "$(GREEN)✓ Minimal CI passed$(NC)"

# =============================================================================
# Deployment Gates
# =============================================================================

gate-phase0: deploy-check smoke ## Phase 0 gate: Readiness check
	@echo -e "$(GREEN)✓ Phase 0 gate passed: Ready for deployment$(NC)"

gate-phase1: smoke-db ## Phase 1 gate: Database ready
	@echo -e "$(GREEN)✓ Phase 1 gate passed: Database operational$(NC)"

gate-phase2: smoke-api smoke-db ## Phase 2 gate: Backend ready
	@echo -e "$(GREEN)✓ Phase 2 gate passed: Backend operational$(NC)"

gate-phase3: build-web ## Phase 3 gate: Frontend ready
	@echo -e "$(GREEN)✓ Phase 3 gate passed: Frontend built$(NC)"

gate-production: ci deploy-check ## Production gate: Full validation
	@echo -e "$(GREEN)✓ Production gate passed: Ready for production$(NC)"

.SILENT: help